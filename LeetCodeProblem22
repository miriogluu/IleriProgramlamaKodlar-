1.	class Solution {
2.	    public List<String> generateParenthesis(int n) {
3.	        List<String> combinations = new ArrayList();
4.	        generateAll(new char[2 * n], 0, combinations);
5.	        return combinations;
6.	    }
7.	
8.	    public void generateAll(char[] current, int pos, List<String> result) {
9.	        if (pos == current.length) {
10.	            if (valid(current))
11.	                result.add(new String(current));
12.	        } else {
13.	            current[pos] = '(';
14.	            generateAll(current, pos+1, result);
15.	            current[pos] = ')';
16.	            generateAll(current, pos+1, result);
17.	        }
18.	    }
19.	
20.	    public boolean valid(char[] current) {
21.	        int balance = 0;
22.	        for (char c: current) {
23.	            if (c == '(') balance++;
24.	            else balance--;
25.	            if (balance < 0) return false;
26.	        }
27.	        return (balance == 0);
28.	    }
29.	}
30.	
31.	def generateParenthesis(self, N):
32.	    if N == 0: return ['']
33.	    ans = []
34.	    for c in xrange(N):
35.	        for left in self.generateParenthesis(c):
36.	            for right in self.generateParenthesis(N-1-c):
37.	                ans.append('({}){}'.format(left, right))
38.	    return ans
